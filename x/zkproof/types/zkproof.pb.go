// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fiamma/zkproof/zkproof.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Zkproof struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ProofId     string `protobuf:"bytes,2,opt,name=proofId,proto3" json:"proofId,omitempty"`
	ProofType   uint64 `protobuf:"varint,3,opt,name=proofType,proto3" json:"proofType,omitempty"`
	ProofStatus uint64 `protobuf:"varint,4,opt,name=proofStatus,proto3" json:"proofStatus,omitempty"`
}

func (m *Zkproof) Reset()         { *m = Zkproof{} }
func (m *Zkproof) String() string { return proto.CompactTextString(m) }
func (*Zkproof) ProtoMessage()    {}
func (*Zkproof) Descriptor() ([]byte, []int) {
	return fileDescriptor_34020df3ad9f3bf1, []int{0}
}
func (m *Zkproof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Zkproof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Zkproof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Zkproof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Zkproof.Merge(m, src)
}
func (m *Zkproof) XXX_Size() int {
	return m.Size()
}
func (m *Zkproof) XXX_DiscardUnknown() {
	xxx_messageInfo_Zkproof.DiscardUnknown(m)
}

var xxx_messageInfo_Zkproof proto.InternalMessageInfo

func (m *Zkproof) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Zkproof) GetProofId() string {
	if m != nil {
		return m.ProofId
	}
	return ""
}

func (m *Zkproof) GetProofType() uint64 {
	if m != nil {
		return m.ProofType
	}
	return 0
}

func (m *Zkproof) GetProofStatus() uint64 {
	if m != nil {
		return m.ProofStatus
	}
	return 0
}

func init() {
	proto.RegisterType((*Zkproof)(nil), "fiamma.zkproof.Zkproof")
}

func init() { proto.RegisterFile("fiamma/zkproof/zkproof.proto", fileDescriptor_34020df3ad9f3bf1) }

var fileDescriptor_34020df3ad9f3bf1 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x49, 0xcb, 0x4c, 0xcc,
	0xcd, 0x4d, 0xd4, 0xaf, 0xca, 0x2e, 0x28, 0xca, 0xcf, 0x4f, 0x83, 0xd1, 0x7a, 0x05, 0x45, 0xf9,
	0x25, 0xf9, 0x42, 0x7c, 0x10, 0x59, 0x3d, 0xa8, 0xa8, 0x52, 0x2d, 0x17, 0x7b, 0x14, 0x84, 0x29,
	0x24, 0xc1, 0xc5, 0x9e, 0x5c, 0x94, 0x9a, 0x58, 0x92, 0x5f, 0x24, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1,
	0x19, 0x04, 0xe3, 0x82, 0x64, 0xc0, 0x4a, 0x3c, 0x53, 0x24, 0x98, 0x20, 0x32, 0x50, 0xae, 0x90,
	0x0c, 0x17, 0x27, 0x98, 0x19, 0x52, 0x59, 0x90, 0x2a, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x12, 0x84,
	0x10, 0x10, 0x52, 0xe0, 0xe2, 0x06, 0x73, 0x82, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0x25, 0x58, 0xc0,
	0xf2, 0xc8, 0x42, 0x4e, 0x06, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91,
	0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x25,
	0x06, 0xf5, 0x46, 0x05, 0xdc, 0x23, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x7f, 0x18,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x64, 0x12, 0x92, 0xf7, 0xe7, 0x00, 0x00, 0x00,
}

func (m *Zkproof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Zkproof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Zkproof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProofStatus != 0 {
		i = encodeVarintZkproof(dAtA, i, uint64(m.ProofStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.ProofType != 0 {
		i = encodeVarintZkproof(dAtA, i, uint64(m.ProofType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProofId) > 0 {
		i -= len(m.ProofId)
		copy(dAtA[i:], m.ProofId)
		i = encodeVarintZkproof(dAtA, i, uint64(len(m.ProofId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintZkproof(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintZkproof(dAtA []byte, offset int, v uint64) int {
	offset -= sovZkproof(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Zkproof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovZkproof(uint64(l))
	}
	l = len(m.ProofId)
	if l > 0 {
		n += 1 + l + sovZkproof(uint64(l))
	}
	if m.ProofType != 0 {
		n += 1 + sovZkproof(uint64(m.ProofType))
	}
	if m.ProofStatus != 0 {
		n += 1 + sovZkproof(uint64(m.ProofStatus))
	}
	return n
}

func sovZkproof(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZkproof(x uint64) (n int) {
	return sovZkproof(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Zkproof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZkproof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Zkproof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Zkproof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkproof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkproof
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkproof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkproof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkproof
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkproof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			m.ProofType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkproof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofStatus", wireType)
			}
			m.ProofStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkproof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofStatus |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZkproof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZkproof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZkproof(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZkproof
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZkproof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZkproof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZkproof
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZkproof
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZkproof
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZkproof        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZkproof          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZkproof = fmt.Errorf("proto: unexpected end of group")
)
