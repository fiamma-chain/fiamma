// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fiamma/bitvmstaker/bitvmstaker.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StakerInfo is the data structure for the BitVM staker information
type StakerInfo struct {
	StakerIndex   uint64 `protobuf:"varint,1,opt,name=staker_index,json=stakerIndex,proto3" json:"staker_index,omitempty"`
	StakerAddress string `protobuf:"bytes,2,opt,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty"`
}

func (m *StakerInfo) Reset()         { *m = StakerInfo{} }
func (m *StakerInfo) String() string { return proto.CompactTextString(m) }
func (*StakerInfo) ProtoMessage()    {}
func (*StakerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_73aa25d34ac73f1f, []int{0}
}
func (m *StakerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerInfo.Merge(m, src)
}
func (m *StakerInfo) XXX_Size() int {
	return m.Size()
}
func (m *StakerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StakerInfo proto.InternalMessageInfo

func (m *StakerInfo) GetStakerIndex() uint64 {
	if m != nil {
		return m.StakerIndex
	}
	return 0
}

func (m *StakerInfo) GetStakerAddress() string {
	if m != nil {
		return m.StakerAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*StakerInfo)(nil), "fiamma.bitvmstaker.StakerInfo")
}

func init() {
	proto.RegisterFile("fiamma/bitvmstaker/bitvmstaker.proto", fileDescriptor_73aa25d34ac73f1f)
}

var fileDescriptor_73aa25d34ac73f1f = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x49, 0xcb, 0x4c, 0xcc,
	0xcd, 0x4d, 0xd4, 0x4f, 0xca, 0x2c, 0x29, 0xcb, 0x2d, 0x2e, 0x49, 0xcc, 0x4e, 0x2d, 0x42, 0x66,
	0xeb, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x09, 0x41, 0x54, 0xe9, 0x21, 0xc9, 0x48, 0x89, 0xa4,
	0xe7, 0xa7, 0xe7, 0x83, 0xa5, 0xf5, 0x41, 0x2c, 0x88, 0x4a, 0xa5, 0x30, 0x2e, 0xae, 0x60, 0xb0,
	0xbc, 0x67, 0x5e, 0x5a, 0xbe, 0x90, 0x22, 0x17, 0x0f, 0x44, 0x75, 0x7c, 0x66, 0x5e, 0x4a, 0x6a,
	0x85, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4b, 0x10, 0x77, 0x31, 0x54, 0x45, 0x4a, 0x6a, 0x85, 0x90,
	0x2a, 0x17, 0x1f, 0x54, 0x49, 0x62, 0x4a, 0x4a, 0x51, 0x6a, 0x71, 0xb1, 0x04, 0x93, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x2f, 0x44, 0xd4, 0x11, 0x22, 0xe8, 0x64, 0x72, 0xe2, 0x91, 0x1c, 0xe3, 0x85,
	0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3,
	0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x52, 0x50, 0x1f, 0x54, 0xa0, 0xf8, 0xa1, 0xa4, 0xb2, 0x20, 0xb5,
	0x38, 0x89, 0x0d, 0xec, 0x28, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x18, 0x2a, 0xa3,
	0xe6, 0x00, 0x00, 0x00,
}

func (m *StakerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakerAddress) > 0 {
		i -= len(m.StakerAddress)
		copy(dAtA[i:], m.StakerAddress)
		i = encodeVarintBitvmstaker(dAtA, i, uint64(len(m.StakerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.StakerIndex != 0 {
		i = encodeVarintBitvmstaker(dAtA, i, uint64(m.StakerIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBitvmstaker(dAtA []byte, offset int, v uint64) int {
	offset -= sovBitvmstaker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakerIndex != 0 {
		n += 1 + sovBitvmstaker(uint64(m.StakerIndex))
	}
	l = len(m.StakerAddress)
	if l > 0 {
		n += 1 + l + sovBitvmstaker(uint64(l))
	}
	return n
}

func sovBitvmstaker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBitvmstaker(x uint64) (n int) {
	return sovBitvmstaker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StakerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitvmstaker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerIndex", wireType)
			}
			m.StakerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitvmstaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakerIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitvmstaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitvmstaker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitvmstaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBitvmstaker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitvmstaker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBitvmstaker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBitvmstaker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBitvmstaker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBitvmstaker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBitvmstaker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBitvmstaker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBitvmstaker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBitvmstaker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBitvmstaker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBitvmstaker = fmt.Errorf("proto: unexpected end of group")
)
