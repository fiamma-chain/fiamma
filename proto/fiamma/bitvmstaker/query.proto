syntax = "proto3";

package fiamma.bitvmstaker;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "fiamma/bitvmstaker/params.proto";
import "fiamma/bitvmstaker/bitvmstaker.proto";

option go_package = "fiamma/x/bitvmstaker/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/fiamma/bitvmstaker/params";
  
  }
  
  // QueryAllStakerInfoRequest is the request type for the Query/AllStakerInfo RPC method.
  rpc AllStakerInfo (QueryAllStakerInfoRequest) returns (QueryAllStakerInfoResponse) {
    option (google.api.http).get = "/fiamma/bitvmstaker/get_all_staker_info";
  
  }
  
  // QueryCommitteeAddressRequest is the request type for the Query/CommitteeAddress RPC method.
  rpc CommitteeAddress (QueryCommitteeAddressRequest) returns (QueryCommitteeAddressResponse) {
    option (google.api.http).get = "/fiamma/bitvmstaker/committee_address";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryAllStakerInfoRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStakerInfoResponse {
  repeated fiamma.bitvmstaker.StakerInfo all_staker_info = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination      = 2;
}

message QueryCommitteeAddressRequest {}

message QueryCommitteeAddressResponse {
  string committeeAddress = 1;
}

