// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package zkpverify

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_ProofData              protoreflect.MessageDescriptor
	fd_ProofData_proof_system protoreflect.FieldDescriptor
	fd_ProofData_proof        protoreflect.FieldDescriptor
	fd_ProofData_public_input protoreflect.FieldDescriptor
	fd_ProofData_vk           protoreflect.FieldDescriptor
)

func init() {
	file_fiamma_zkpverify_zkpverify_proto_init()
	md_ProofData = File_fiamma_zkpverify_zkpverify_proto.Messages().ByName("ProofData")
	fd_ProofData_proof_system = md_ProofData.Fields().ByName("proof_system")
	fd_ProofData_proof = md_ProofData.Fields().ByName("proof")
	fd_ProofData_public_input = md_ProofData.Fields().ByName("public_input")
	fd_ProofData_vk = md_ProofData.Fields().ByName("vk")
}

var _ protoreflect.Message = (*fastReflection_ProofData)(nil)

type fastReflection_ProofData ProofData

func (x *ProofData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ProofData)(x)
}

func (x *ProofData) slowProtoReflect() protoreflect.Message {
	mi := &file_fiamma_zkpverify_zkpverify_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ProofData_messageType fastReflection_ProofData_messageType
var _ protoreflect.MessageType = fastReflection_ProofData_messageType{}

type fastReflection_ProofData_messageType struct{}

func (x fastReflection_ProofData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ProofData)(nil)
}
func (x fastReflection_ProofData_messageType) New() protoreflect.Message {
	return new(fastReflection_ProofData)
}
func (x fastReflection_ProofData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ProofData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ProofData) Descriptor() protoreflect.MessageDescriptor {
	return md_ProofData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ProofData) Type() protoreflect.MessageType {
	return _fastReflection_ProofData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ProofData) New() protoreflect.Message {
	return new(fastReflection_ProofData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ProofData) Interface() protoreflect.ProtoMessage {
	return (*ProofData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ProofData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ProofSystem != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.ProofSystem))
		if !f(fd_ProofData_proof_system, value) {
			return
		}
	}
	if len(x.Proof) != 0 {
		value := protoreflect.ValueOfBytes(x.Proof)
		if !f(fd_ProofData_proof, value) {
			return
		}
	}
	if len(x.PublicInput) != 0 {
		value := protoreflect.ValueOfBytes(x.PublicInput)
		if !f(fd_ProofData_public_input, value) {
			return
		}
	}
	if len(x.Vk) != 0 {
		value := protoreflect.ValueOfBytes(x.Vk)
		if !f(fd_ProofData_vk, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ProofData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fiamma.zkpverify.ProofData.proof_system":
		return x.ProofSystem != 0
	case "fiamma.zkpverify.ProofData.proof":
		return len(x.Proof) != 0
	case "fiamma.zkpverify.ProofData.public_input":
		return len(x.PublicInput) != 0
	case "fiamma.zkpverify.ProofData.vk":
		return len(x.Vk) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fiamma.zkpverify.ProofData"))
		}
		panic(fmt.Errorf("message fiamma.zkpverify.ProofData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProofData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fiamma.zkpverify.ProofData.proof_system":
		x.ProofSystem = 0
	case "fiamma.zkpverify.ProofData.proof":
		x.Proof = nil
	case "fiamma.zkpverify.ProofData.public_input":
		x.PublicInput = nil
	case "fiamma.zkpverify.ProofData.vk":
		x.Vk = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fiamma.zkpverify.ProofData"))
		}
		panic(fmt.Errorf("message fiamma.zkpverify.ProofData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ProofData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fiamma.zkpverify.ProofData.proof_system":
		value := x.ProofSystem
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "fiamma.zkpverify.ProofData.proof":
		value := x.Proof
		return protoreflect.ValueOfBytes(value)
	case "fiamma.zkpverify.ProofData.public_input":
		value := x.PublicInput
		return protoreflect.ValueOfBytes(value)
	case "fiamma.zkpverify.ProofData.vk":
		value := x.Vk
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fiamma.zkpverify.ProofData"))
		}
		panic(fmt.Errorf("message fiamma.zkpverify.ProofData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProofData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fiamma.zkpverify.ProofData.proof_system":
		x.ProofSystem = (ProofSystem)(value.Enum())
	case "fiamma.zkpverify.ProofData.proof":
		x.Proof = value.Bytes()
	case "fiamma.zkpverify.ProofData.public_input":
		x.PublicInput = value.Bytes()
	case "fiamma.zkpverify.ProofData.vk":
		x.Vk = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fiamma.zkpverify.ProofData"))
		}
		panic(fmt.Errorf("message fiamma.zkpverify.ProofData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProofData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fiamma.zkpverify.ProofData.proof_system":
		panic(fmt.Errorf("field proof_system of message fiamma.zkpverify.ProofData is not mutable"))
	case "fiamma.zkpverify.ProofData.proof":
		panic(fmt.Errorf("field proof of message fiamma.zkpverify.ProofData is not mutable"))
	case "fiamma.zkpverify.ProofData.public_input":
		panic(fmt.Errorf("field public_input of message fiamma.zkpverify.ProofData is not mutable"))
	case "fiamma.zkpverify.ProofData.vk":
		panic(fmt.Errorf("field vk of message fiamma.zkpverify.ProofData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fiamma.zkpverify.ProofData"))
		}
		panic(fmt.Errorf("message fiamma.zkpverify.ProofData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ProofData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fiamma.zkpverify.ProofData.proof_system":
		return protoreflect.ValueOfEnum(0)
	case "fiamma.zkpverify.ProofData.proof":
		return protoreflect.ValueOfBytes(nil)
	case "fiamma.zkpverify.ProofData.public_input":
		return protoreflect.ValueOfBytes(nil)
	case "fiamma.zkpverify.ProofData.vk":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fiamma.zkpverify.ProofData"))
		}
		panic(fmt.Errorf("message fiamma.zkpverify.ProofData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ProofData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fiamma.zkpverify.ProofData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ProofData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProofData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ProofData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ProofData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ProofData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ProofSystem != 0 {
			n += 1 + runtime.Sov(uint64(x.ProofSystem))
		}
		l = len(x.Proof)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PublicInput)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Vk)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ProofData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Vk) > 0 {
			i -= len(x.Vk)
			copy(dAtA[i:], x.Vk)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Vk)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.PublicInput) > 0 {
			i -= len(x.PublicInput)
			copy(dAtA[i:], x.PublicInput)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PublicInput)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Proof) > 0 {
			i -= len(x.Proof)
			copy(dAtA[i:], x.Proof)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Proof)))
			i--
			dAtA[i] = 0x12
		}
		if x.ProofSystem != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ProofSystem))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ProofData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProofData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProofData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProofSystem", wireType)
				}
				x.ProofSystem = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ProofSystem |= ProofSystem(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Proof = append(x.Proof[:0], dAtA[iNdEx:postIndex]...)
				if x.Proof == nil {
					x.Proof = []byte{}
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PublicInput", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PublicInput = append(x.PublicInput[:0], dAtA[iNdEx:postIndex]...)
				if x.PublicInput == nil {
					x.PublicInput = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Vk", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Vk = append(x.Vk[:0], dAtA[iNdEx:postIndex]...)
				if x.Vk == nil {
					x.Vk = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_VerifyResult                              protoreflect.MessageDescriptor
	fd_VerifyResult_proof_id                     protoreflect.FieldDescriptor
	fd_VerifyResult_proof_system                 protoreflect.FieldDescriptor
	fd_VerifyResult_data_commitment              protoreflect.FieldDescriptor
	fd_VerifyResult_data_location                protoreflect.FieldDescriptor
	fd_VerifyResult_result                       protoreflect.FieldDescriptor
	fd_VerifyResult_status                       protoreflect.FieldDescriptor
	fd_VerifyResult_community_verification_count protoreflect.FieldDescriptor
)

func init() {
	file_fiamma_zkpverify_zkpverify_proto_init()
	md_VerifyResult = File_fiamma_zkpverify_zkpverify_proto.Messages().ByName("VerifyResult")
	fd_VerifyResult_proof_id = md_VerifyResult.Fields().ByName("proof_id")
	fd_VerifyResult_proof_system = md_VerifyResult.Fields().ByName("proof_system")
	fd_VerifyResult_data_commitment = md_VerifyResult.Fields().ByName("data_commitment")
	fd_VerifyResult_data_location = md_VerifyResult.Fields().ByName("data_location")
	fd_VerifyResult_result = md_VerifyResult.Fields().ByName("result")
	fd_VerifyResult_status = md_VerifyResult.Fields().ByName("status")
	fd_VerifyResult_community_verification_count = md_VerifyResult.Fields().ByName("community_verification_count")
}

var _ protoreflect.Message = (*fastReflection_VerifyResult)(nil)

type fastReflection_VerifyResult VerifyResult

func (x *VerifyResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VerifyResult)(x)
}

func (x *VerifyResult) slowProtoReflect() protoreflect.Message {
	mi := &file_fiamma_zkpverify_zkpverify_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VerifyResult_messageType fastReflection_VerifyResult_messageType
var _ protoreflect.MessageType = fastReflection_VerifyResult_messageType{}

type fastReflection_VerifyResult_messageType struct{}

func (x fastReflection_VerifyResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VerifyResult)(nil)
}
func (x fastReflection_VerifyResult_messageType) New() protoreflect.Message {
	return new(fastReflection_VerifyResult)
}
func (x fastReflection_VerifyResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VerifyResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VerifyResult) Descriptor() protoreflect.MessageDescriptor {
	return md_VerifyResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VerifyResult) Type() protoreflect.MessageType {
	return _fastReflection_VerifyResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VerifyResult) New() protoreflect.Message {
	return new(fastReflection_VerifyResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VerifyResult) Interface() protoreflect.ProtoMessage {
	return (*VerifyResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VerifyResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ProofId != "" {
		value := protoreflect.ValueOfString(x.ProofId)
		if !f(fd_VerifyResult_proof_id, value) {
			return
		}
	}
	if x.ProofSystem != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.ProofSystem))
		if !f(fd_VerifyResult_proof_system, value) {
			return
		}
	}
	if x.DataCommitment != "" {
		value := protoreflect.ValueOfString(x.DataCommitment)
		if !f(fd_VerifyResult_data_commitment, value) {
			return
		}
	}
	if x.DataLocation != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.DataLocation))
		if !f(fd_VerifyResult_data_location, value) {
			return
		}
	}
	if x.Result != false {
		value := protoreflect.ValueOfBool(x.Result)
		if !f(fd_VerifyResult_result, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_VerifyResult_status, value) {
			return
		}
	}
	if x.CommunityVerificationCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CommunityVerificationCount)
		if !f(fd_VerifyResult_community_verification_count, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VerifyResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fiamma.zkpverify.VerifyResult.proof_id":
		return x.ProofId != ""
	case "fiamma.zkpverify.VerifyResult.proof_system":
		return x.ProofSystem != 0
	case "fiamma.zkpverify.VerifyResult.data_commitment":
		return x.DataCommitment != ""
	case "fiamma.zkpverify.VerifyResult.data_location":
		return x.DataLocation != 0
	case "fiamma.zkpverify.VerifyResult.result":
		return x.Result != false
	case "fiamma.zkpverify.VerifyResult.status":
		return x.Status != 0
	case "fiamma.zkpverify.VerifyResult.community_verification_count":
		return x.CommunityVerificationCount != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fiamma.zkpverify.VerifyResult"))
		}
		panic(fmt.Errorf("message fiamma.zkpverify.VerifyResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VerifyResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fiamma.zkpverify.VerifyResult.proof_id":
		x.ProofId = ""
	case "fiamma.zkpverify.VerifyResult.proof_system":
		x.ProofSystem = 0
	case "fiamma.zkpverify.VerifyResult.data_commitment":
		x.DataCommitment = ""
	case "fiamma.zkpverify.VerifyResult.data_location":
		x.DataLocation = 0
	case "fiamma.zkpverify.VerifyResult.result":
		x.Result = false
	case "fiamma.zkpverify.VerifyResult.status":
		x.Status = 0
	case "fiamma.zkpverify.VerifyResult.community_verification_count":
		x.CommunityVerificationCount = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fiamma.zkpverify.VerifyResult"))
		}
		panic(fmt.Errorf("message fiamma.zkpverify.VerifyResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VerifyResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fiamma.zkpverify.VerifyResult.proof_id":
		value := x.ProofId
		return protoreflect.ValueOfString(value)
	case "fiamma.zkpverify.VerifyResult.proof_system":
		value := x.ProofSystem
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "fiamma.zkpverify.VerifyResult.data_commitment":
		value := x.DataCommitment
		return protoreflect.ValueOfString(value)
	case "fiamma.zkpverify.VerifyResult.data_location":
		value := x.DataLocation
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "fiamma.zkpverify.VerifyResult.result":
		value := x.Result
		return protoreflect.ValueOfBool(value)
	case "fiamma.zkpverify.VerifyResult.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "fiamma.zkpverify.VerifyResult.community_verification_count":
		value := x.CommunityVerificationCount
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fiamma.zkpverify.VerifyResult"))
		}
		panic(fmt.Errorf("message fiamma.zkpverify.VerifyResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VerifyResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fiamma.zkpverify.VerifyResult.proof_id":
		x.ProofId = value.Interface().(string)
	case "fiamma.zkpverify.VerifyResult.proof_system":
		x.ProofSystem = (ProofSystem)(value.Enum())
	case "fiamma.zkpverify.VerifyResult.data_commitment":
		x.DataCommitment = value.Interface().(string)
	case "fiamma.zkpverify.VerifyResult.data_location":
		x.DataLocation = (DataLocation)(value.Enum())
	case "fiamma.zkpverify.VerifyResult.result":
		x.Result = value.Bool()
	case "fiamma.zkpverify.VerifyResult.status":
		x.Status = (VerificationStatus)(value.Enum())
	case "fiamma.zkpverify.VerifyResult.community_verification_count":
		x.CommunityVerificationCount = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fiamma.zkpverify.VerifyResult"))
		}
		panic(fmt.Errorf("message fiamma.zkpverify.VerifyResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VerifyResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fiamma.zkpverify.VerifyResult.proof_id":
		panic(fmt.Errorf("field proof_id of message fiamma.zkpverify.VerifyResult is not mutable"))
	case "fiamma.zkpverify.VerifyResult.proof_system":
		panic(fmt.Errorf("field proof_system of message fiamma.zkpverify.VerifyResult is not mutable"))
	case "fiamma.zkpverify.VerifyResult.data_commitment":
		panic(fmt.Errorf("field data_commitment of message fiamma.zkpverify.VerifyResult is not mutable"))
	case "fiamma.zkpverify.VerifyResult.data_location":
		panic(fmt.Errorf("field data_location of message fiamma.zkpverify.VerifyResult is not mutable"))
	case "fiamma.zkpverify.VerifyResult.result":
		panic(fmt.Errorf("field result of message fiamma.zkpverify.VerifyResult is not mutable"))
	case "fiamma.zkpverify.VerifyResult.status":
		panic(fmt.Errorf("field status of message fiamma.zkpverify.VerifyResult is not mutable"))
	case "fiamma.zkpverify.VerifyResult.community_verification_count":
		panic(fmt.Errorf("field community_verification_count of message fiamma.zkpverify.VerifyResult is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fiamma.zkpverify.VerifyResult"))
		}
		panic(fmt.Errorf("message fiamma.zkpverify.VerifyResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VerifyResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fiamma.zkpverify.VerifyResult.proof_id":
		return protoreflect.ValueOfString("")
	case "fiamma.zkpverify.VerifyResult.proof_system":
		return protoreflect.ValueOfEnum(0)
	case "fiamma.zkpverify.VerifyResult.data_commitment":
		return protoreflect.ValueOfString("")
	case "fiamma.zkpverify.VerifyResult.data_location":
		return protoreflect.ValueOfEnum(0)
	case "fiamma.zkpverify.VerifyResult.result":
		return protoreflect.ValueOfBool(false)
	case "fiamma.zkpverify.VerifyResult.status":
		return protoreflect.ValueOfEnum(0)
	case "fiamma.zkpverify.VerifyResult.community_verification_count":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fiamma.zkpverify.VerifyResult"))
		}
		panic(fmt.Errorf("message fiamma.zkpverify.VerifyResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VerifyResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fiamma.zkpverify.VerifyResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VerifyResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VerifyResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VerifyResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VerifyResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VerifyResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ProofId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ProofSystem != 0 {
			n += 1 + runtime.Sov(uint64(x.ProofSystem))
		}
		l = len(x.DataCommitment)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DataLocation != 0 {
			n += 1 + runtime.Sov(uint64(x.DataLocation))
		}
		if x.Result {
			n += 2
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.CommunityVerificationCount != 0 {
			n += 1 + runtime.Sov(uint64(x.CommunityVerificationCount))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VerifyResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CommunityVerificationCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CommunityVerificationCount))
			i--
			dAtA[i] = 0x38
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x30
		}
		if x.Result {
			i--
			if x.Result {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if x.DataLocation != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DataLocation))
			i--
			dAtA[i] = 0x20
		}
		if len(x.DataCommitment) > 0 {
			i -= len(x.DataCommitment)
			copy(dAtA[i:], x.DataCommitment)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DataCommitment)))
			i--
			dAtA[i] = 0x1a
		}
		if x.ProofSystem != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ProofSystem))
			i--
			dAtA[i] = 0x10
		}
		if len(x.ProofId) > 0 {
			i -= len(x.ProofId)
			copy(dAtA[i:], x.ProofId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProofId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VerifyResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VerifyResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VerifyResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProofId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProofId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProofSystem", wireType)
				}
				x.ProofSystem = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ProofSystem |= ProofSystem(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DataCommitment", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DataCommitment = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DataLocation", wireType)
				}
				x.DataLocation = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DataLocation |= DataLocation(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Result = bool(v != 0)
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= VerificationStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CommunityVerificationCount", wireType)
				}
				x.CommunityVerificationCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CommunityVerificationCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: fiamma/zkpverify/zkpverify.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// VerificationStatus is the verification status enum for the proof verification
type VerificationStatus int32

const (
	VerificationStatus_INITIAL_VALIDATION    VerificationStatus = 0
	VerificationStatus_COMMUNITY_VALIDATION  VerificationStatus = 1
	VerificationStatus_DEFINITIVE_VALIDATION VerificationStatus = 2
)

// Enum value maps for VerificationStatus.
var (
	VerificationStatus_name = map[int32]string{
		0: "INITIAL_VALIDATION",
		1: "COMMUNITY_VALIDATION",
		2: "DEFINITIVE_VALIDATION",
	}
	VerificationStatus_value = map[string]int32{
		"INITIAL_VALIDATION":    0,
		"COMMUNITY_VALIDATION":  1,
		"DEFINITIVE_VALIDATION": 2,
	}
)

func (x VerificationStatus) Enum() *VerificationStatus {
	p := new(VerificationStatus)
	*p = x
	return p
}

func (x VerificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fiamma_zkpverify_zkpverify_proto_enumTypes[0].Descriptor()
}

func (VerificationStatus) Type() protoreflect.EnumType {
	return &file_fiamma_zkpverify_zkpverify_proto_enumTypes[0]
}

func (x VerificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationStatus.Descriptor instead.
func (VerificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_fiamma_zkpverify_zkpverify_proto_rawDescGZIP(), []int{0}
}

// DataLocation is the proof data location enum for the proof verification
type DataLocation int32

const (
	DataLocation_FIAMMA  DataLocation = 0
	DataLocation_NUBITDA DataLocation = 1
	DataLocation_AVAILDA DataLocation = 2
)

// Enum value maps for DataLocation.
var (
	DataLocation_name = map[int32]string{
		0: "FIAMMA",
		1: "NUBITDA",
		2: "AVAILDA",
	}
	DataLocation_value = map[string]int32{
		"FIAMMA":  0,
		"NUBITDA": 1,
		"AVAILDA": 2,
	}
)

func (x DataLocation) Enum() *DataLocation {
	p := new(DataLocation)
	*p = x
	return p
}

func (x DataLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_fiamma_zkpverify_zkpverify_proto_enumTypes[1].Descriptor()
}

func (DataLocation) Type() protoreflect.EnumType {
	return &file_fiamma_zkpverify_zkpverify_proto_enumTypes[1]
}

func (x DataLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataLocation.Descriptor instead.
func (DataLocation) EnumDescriptor() ([]byte, []int) {
	return file_fiamma_zkpverify_zkpverify_proto_rawDescGZIP(), []int{1}
}

// ProofSystem is the proof system enum for the proof verification
type ProofSystem int32

const (
	ProofSystem_GROTH16_BN254_BITVM ProofSystem = 0
	ProofSystem_PLONK_BN254         ProofSystem = 1
	ProofSystem_PLONK_BLS12_381     ProofSystem = 2
	ProofSystem_GROTH16_BN254       ProofSystem = 3
	ProofSystem_SP1                 ProofSystem = 4
)

// Enum value maps for ProofSystem.
var (
	ProofSystem_name = map[int32]string{
		0: "GROTH16_BN254_BITVM",
		1: "PLONK_BN254",
		2: "PLONK_BLS12_381",
		3: "GROTH16_BN254",
		4: "SP1",
	}
	ProofSystem_value = map[string]int32{
		"GROTH16_BN254_BITVM": 0,
		"PLONK_BN254":         1,
		"PLONK_BLS12_381":     2,
		"GROTH16_BN254":       3,
		"SP1":                 4,
	}
)

func (x ProofSystem) Enum() *ProofSystem {
	p := new(ProofSystem)
	*p = x
	return p
}

func (x ProofSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProofSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_fiamma_zkpverify_zkpverify_proto_enumTypes[2].Descriptor()
}

func (ProofSystem) Type() protoreflect.EnumType {
	return &file_fiamma_zkpverify_zkpverify_proto_enumTypes[2]
}

func (x ProofSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProofSystem.Descriptor instead.
func (ProofSystem) EnumDescriptor() ([]byte, []int) {
	return file_fiamma_zkpverify_zkpverify_proto_rawDescGZIP(), []int{2}
}

// ProofData is the data structure for the proof verification request
type ProofData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofSystem ProofSystem `protobuf:"varint,1,opt,name=proof_system,json=proofSystem,proto3,enum=fiamma.zkpverify.ProofSystem" json:"proof_system,omitempty"`
	Proof       []byte      `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	PublicInput []byte      `protobuf:"bytes,3,opt,name=public_input,json=publicInput,proto3" json:"public_input,omitempty"`
	Vk          []byte      `protobuf:"bytes,4,opt,name=vk,proto3" json:"vk,omitempty"`
}

func (x *ProofData) Reset() {
	*x = ProofData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fiamma_zkpverify_zkpverify_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofData) ProtoMessage() {}

// Deprecated: Use ProofData.ProtoReflect.Descriptor instead.
func (*ProofData) Descriptor() ([]byte, []int) {
	return file_fiamma_zkpverify_zkpverify_proto_rawDescGZIP(), []int{0}
}

func (x *ProofData) GetProofSystem() ProofSystem {
	if x != nil {
		return x.ProofSystem
	}
	return ProofSystem_GROTH16_BN254_BITVM
}

func (x *ProofData) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *ProofData) GetPublicInput() []byte {
	if x != nil {
		return x.PublicInput
	}
	return nil
}

func (x *ProofData) GetVk() []byte {
	if x != nil {
		return x.Vk
	}
	return nil
}

// VerifyResult is the data structure for the proof verification result
type VerifyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofId                    string             `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	ProofSystem                ProofSystem        `protobuf:"varint,2,opt,name=proof_system,json=proofSystem,proto3,enum=fiamma.zkpverify.ProofSystem" json:"proof_system,omitempty"`
	DataCommitment             string             `protobuf:"bytes,3,opt,name=data_commitment,json=dataCommitment,proto3" json:"data_commitment,omitempty"`
	DataLocation               DataLocation       `protobuf:"varint,4,opt,name=data_location,json=dataLocation,proto3,enum=fiamma.zkpverify.DataLocation" json:"data_location,omitempty"`
	Result                     bool               `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`
	Status                     VerificationStatus `protobuf:"varint,6,opt,name=status,proto3,enum=fiamma.zkpverify.VerificationStatus" json:"status,omitempty"`
	CommunityVerificationCount uint64             `protobuf:"varint,7,opt,name=community_verification_count,json=communityVerificationCount,proto3" json:"community_verification_count,omitempty"`
}

func (x *VerifyResult) Reset() {
	*x = VerifyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fiamma_zkpverify_zkpverify_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyResult) ProtoMessage() {}

// Deprecated: Use VerifyResult.ProtoReflect.Descriptor instead.
func (*VerifyResult) Descriptor() ([]byte, []int) {
	return file_fiamma_zkpverify_zkpverify_proto_rawDescGZIP(), []int{1}
}

func (x *VerifyResult) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

func (x *VerifyResult) GetProofSystem() ProofSystem {
	if x != nil {
		return x.ProofSystem
	}
	return ProofSystem_GROTH16_BN254_BITVM
}

func (x *VerifyResult) GetDataCommitment() string {
	if x != nil {
		return x.DataCommitment
	}
	return ""
}

func (x *VerifyResult) GetDataLocation() DataLocation {
	if x != nil {
		return x.DataLocation
	}
	return DataLocation_FIAMMA
}

func (x *VerifyResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *VerifyResult) GetStatus() VerificationStatus {
	if x != nil {
		return x.Status
	}
	return VerificationStatus_INITIAL_VALIDATION
}

func (x *VerifyResult) GetCommunityVerificationCount() uint64 {
	if x != nil {
		return x.CommunityVerificationCount
	}
	return 0
}

var File_fiamma_zkpverify_zkpverify_proto protoreflect.FileDescriptor

var file_fiamma_zkpverify_zkpverify_proto_rawDesc = []byte{
	0x0a, 0x20, 0x66, 0x69, 0x61, 0x6d, 0x6d, 0x61, 0x2f, 0x7a, 0x6b, 0x70, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x2f, 0x7a, 0x6b, 0x70, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x66, 0x69, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x7a, 0x6b, 0x70, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x09, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x66, 0x69, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x7a, 0x6b, 0x70, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x76, 0x6b, 0x22, 0xf1, 0x02, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x7a,
	0x6b, 0x70, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x7a, 0x6b, 0x70, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x66, 0x69, 0x61, 0x6d, 0x6d, 0x61,
	0x2e, 0x7a, 0x6b, 0x70, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x61, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49,
	0x54, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0x34, 0x0a, 0x0c, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49,
	0x41, 0x4d, 0x4d, 0x41, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x42, 0x49, 0x54, 0x44,
	0x41, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x44, 0x41, 0x10, 0x02,
	0x2a, 0x68, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x17, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x54, 0x48, 0x31, 0x36, 0x5f, 0x42, 0x4e, 0x32, 0x35, 0x34,
	0x5f, 0x42, 0x49, 0x54, 0x56, 0x4d, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x4f, 0x4e,
	0x4b, 0x5f, 0x42, 0x4e, 0x32, 0x35, 0x34, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x4f,
	0x4e, 0x4b, 0x5f, 0x42, 0x4c, 0x53, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x47, 0x52, 0x4f, 0x54, 0x48, 0x31, 0x36, 0x5f, 0x42, 0x4e, 0x32, 0x35, 0x34, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x50, 0x31, 0x10, 0x04, 0x42, 0xaa, 0x01, 0x0a, 0x14, 0x63,
	0x6f, 0x6d, 0x2e, 0x66, 0x69, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x7a, 0x6b, 0x70, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x42, 0x0e, 0x5a, 0x6b, 0x70, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x21, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x61, 0x6d, 0x6d, 0x61, 0x2f, 0x7a,
	0x6b, 0x70, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0xa2, 0x02, 0x03, 0x46, 0x5a, 0x58, 0xaa, 0x02,
	0x10, 0x46, 0x69, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x5a, 0x6b, 0x70, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0xca, 0x02, 0x10, 0x46, 0x69, 0x61, 0x6d, 0x6d, 0x61, 0x5c, 0x5a, 0x6b, 0x70, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0xe2, 0x02, 0x1c, 0x46, 0x69, 0x61, 0x6d, 0x6d, 0x61, 0x5c, 0x5a, 0x6b,
	0x70, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x46, 0x69, 0x61, 0x6d, 0x6d, 0x61, 0x3a, 0x3a, 0x5a, 0x6b,
	0x70, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fiamma_zkpverify_zkpverify_proto_rawDescOnce sync.Once
	file_fiamma_zkpverify_zkpverify_proto_rawDescData = file_fiamma_zkpverify_zkpverify_proto_rawDesc
)

func file_fiamma_zkpverify_zkpverify_proto_rawDescGZIP() []byte {
	file_fiamma_zkpverify_zkpverify_proto_rawDescOnce.Do(func() {
		file_fiamma_zkpverify_zkpverify_proto_rawDescData = protoimpl.X.CompressGZIP(file_fiamma_zkpverify_zkpverify_proto_rawDescData)
	})
	return file_fiamma_zkpverify_zkpverify_proto_rawDescData
}

var file_fiamma_zkpverify_zkpverify_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_fiamma_zkpverify_zkpverify_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_fiamma_zkpverify_zkpverify_proto_goTypes = []interface{}{
	(VerificationStatus)(0), // 0: fiamma.zkpverify.VerificationStatus
	(DataLocation)(0),       // 1: fiamma.zkpverify.DataLocation
	(ProofSystem)(0),        // 2: fiamma.zkpverify.ProofSystem
	(*ProofData)(nil),       // 3: fiamma.zkpverify.ProofData
	(*VerifyResult)(nil),    // 4: fiamma.zkpverify.VerifyResult
}
var file_fiamma_zkpverify_zkpverify_proto_depIdxs = []int32{
	2, // 0: fiamma.zkpverify.ProofData.proof_system:type_name -> fiamma.zkpverify.ProofSystem
	2, // 1: fiamma.zkpverify.VerifyResult.proof_system:type_name -> fiamma.zkpverify.ProofSystem
	1, // 2: fiamma.zkpverify.VerifyResult.data_location:type_name -> fiamma.zkpverify.DataLocation
	0, // 3: fiamma.zkpverify.VerifyResult.status:type_name -> fiamma.zkpverify.VerificationStatus
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_fiamma_zkpverify_zkpverify_proto_init() }
func file_fiamma_zkpverify_zkpverify_proto_init() {
	if File_fiamma_zkpverify_zkpverify_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fiamma_zkpverify_zkpverify_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fiamma_zkpverify_zkpverify_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fiamma_zkpverify_zkpverify_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fiamma_zkpverify_zkpverify_proto_goTypes,
		DependencyIndexes: file_fiamma_zkpverify_zkpverify_proto_depIdxs,
		EnumInfos:         file_fiamma_zkpverify_zkpverify_proto_enumTypes,
		MessageInfos:      file_fiamma_zkpverify_zkpverify_proto_msgTypes,
	}.Build()
	File_fiamma_zkpverify_zkpverify_proto = out.File
	file_fiamma_zkpverify_zkpverify_proto_rawDesc = nil
	file_fiamma_zkpverify_zkpverify_proto_goTypes = nil
	file_fiamma_zkpverify_zkpverify_proto_depIdxs = nil
}
